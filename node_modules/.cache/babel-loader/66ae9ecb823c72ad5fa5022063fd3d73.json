{"ast":null,"code":"import { TYPES } from \"../actions/action-types\";\nconst quizInitialState = {\n  quizListItem: [],\n  currentQuizItemIndex: 0,\n  score: 0\n};\nexport const QuizReducer = (state = quizInitialState, action) => {\n  switch (action.type) {\n    case TYPES.getQuizListItems:\n      return { ...state,\n        quizListItem: action.payload\n      };\n\n    case TYPES.incrementScore:\n      return { ...state,\n        score: state.countCorrectAnswer + 1\n      };\n\n    case TYPES.setNextQuestion:\n      return { ...state,\n        currentQuizItemIndex: state.currentQuizItemIndex + 1\n      };\n\n    case TYPES.restart:\n      return { ...state,\n        currentQuizItemIndex: 0,\n        countCorrectAnswer: 0\n      };\n\n    default:\n      return state;\n  }\n};\n_c = QuizReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuizReducer\");","map":{"version":3,"sources":["/Users/benjamindesole/Documents/GitHub/TypeScript-Quiz-Starter/src/reducers/quiz.ts"],"names":["TYPES","quizInitialState","quizListItem","currentQuizItemIndex","score","QuizReducer","state","action","type","getQuizListItems","payload","incrementScore","countCorrectAnswer","setNextQuestion","restart"],"mappings":"AACA,SAASA,KAAT,QAAsB,yBAAtB;AASA,MAAMC,gBAAoC,GAAG;AACzCC,EAAAA,YAAY,EAAE,EAD2B;AAEzCC,EAAAA,oBAAoB,EAAG,CAFkB;AAGzCC,EAAAA,KAAK,EAAG;AAHiC,CAA7C;AAMA,OAAO,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGL,gBAAT,EAA2BM,MAA3B,KAAoE;AAC3F,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKR,KAAK,CAACS,gBAAX;AACI,aAAO,EACH,GAAGH,KADA;AAEHJ,QAAAA,YAAY,EAAIK,MAAD,CAAoCG;AAFhD,OAAP;;AAIJ,SAAKV,KAAK,CAACW,cAAX;AACI,aAAO,EACH,GAAGL,KADA;AAEHF,QAAAA,KAAK,EAAEE,KAAK,CAACM,kBAAN,GAA2B;AAF/B,OAAP;;AAIJ,SAAKZ,KAAK,CAACa,eAAX;AACI,aAAO,EACH,GAAGP,KADA;AAEHH,QAAAA,oBAAoB,EAAEG,KAAK,CAACH,oBAAN,GAA6B;AAFhD,OAAP;;AAIA,SAAKH,KAAK,CAACc,OAAX;AACA,aAAO,EACH,GAAGR,KADA;AAEHH,QAAAA,oBAAoB,EAAG,CAFpB;AAGHS,QAAAA,kBAAkB,EAAG;AAHlB,OAAP;;AAKJ;AACI,aAAON,KAAP;AAvBR;AAyBH,CA1BM;KAAMD,W","sourcesContent":["import { AnyAction } from \"redux\";\nimport { TYPES } from \"../actions/action-types\"\nimport { IquizListItem, Action } from \"../models\";\n\nexport interface IquizInitialState {\n    quizListItem : IquizListItem[],\n    currentQuizItemIndex : number,\n    score : number\n}\n\nconst quizInitialState : IquizInitialState = {\n    quizListItem: [],\n    currentQuizItemIndex : 0,\n    score : 0\n}\n\nexport const QuizReducer = (state = quizInitialState, action: AnyAction): IquizInitialState => {\n    switch(action.type) {\n        case TYPES.getQuizListItems :\n            return {\n                ...state,\n                quizListItem : (action as Action<IquizListItem[]>).payload\n            }\n        case TYPES.incrementScore :\n            return {\n                ...state,\n                score: state.countCorrectAnswer + 1\n            }\n        case TYPES.setNextQuestion :\n            return {\n                ...state,\n                currentQuizItemIndex: state.currentQuizItemIndex + 1\n            }\n            case TYPES.restart :\n            return {\n                ...state,\n                currentQuizItemIndex : 0,\n                countCorrectAnswer : 0\n            }\n        default:\n            return state\n    }\n}"]},"metadata":{},"sourceType":"module"}